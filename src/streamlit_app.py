import streamlit as st
import requests
import uuid

st.set_page_config(
    page_title="рж╕рж╣рж╛ржпрж╝ржХ ржмрж╛ржВрж▓рж╛ рж╢рж┐ржХрзНрж╖ржХ",
    page_icon="ЁЯУЪ",
    layout="wide"
)

BASE_API_URL = "http://127.0.0.1:8000"
CHAT_URL = f"{BASE_API_URL}/chat"
MEMORY_URL = f"{BASE_API_URL}/memory"

# Session State Initialization
if "messages" not in st.session_state:
    st.session_state.messages = []
if "user_id" not in st.session_state:
    st.session_state.user_id = "student_" + str(uuid.uuid4())
if "show_memory" not in st.session_state:
    st.session_state.show_memory = True

# Sidebar: Long-Term Memory Display
def display_memory_sidebar():
    """Displays long-term memory from backend."""
    st.sidebar.title("ЁЯза рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзАрж░ рж╕рзНржорзГрждрж┐")
    st.sidebar.markdown(f"**User ID:** `{st.session_state.user_id}`")

    # Toggle to show/hide memory
    toggle = st.sidebar.checkbox("рж╕рзНржорзГрждрж┐ ржжрзЗржЦрж╛ржи", value=st.session_state.show_memory)
    st.session_state.show_memory = toggle

    if not toggle:
        st.sidebar.info("рж╕рзНржорзГрждрж┐ ржЧрзЛржкржи рж░рж╛ржЦрж╛ рж╣ржпрж╝рзЗржЫрзЗред")
        return

    try:
        response = requests.get(f"{MEMORY_URL}/{st.session_state.user_id}", timeout=10)
        response.raise_for_status()
        memory_data = response.json().get("memory")

        if memory_data:
            st.sidebar.success("ржмрж░рзНрждржорж╛ржи рж╢рж┐ржХрзНрж╖рж╛рж░рзНржерзАрж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓:")
            st.sidebar.json(memory_data, expanded=False)
        else:
            st.sidebar.info("ржПржЦржиржУ ржХрзЛржирзЛ рж╕рзНржорзГрждрж┐ рждрзИрж░рж┐ рж╣рзЯржирж┐ред ржкрзНрж░рж╢рзНржи ржХрж░рзБржи ржПржмржВ рж╕рзНржорзГрждрж┐ рждрзИрж░рж┐ рж╣рждрзЗ ржжрж┐ржиред")

    except requests.exceptions.RequestException as e:
        st.sidebar.error(f"рж╕рзНржорзГрждрж┐ API-рж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ ржмрзНржпрж░рзНрже рж╣ржпрж╝рзЗржЫрзЗред\n\nЁЯФМ Error: {e}")

# --- Main UI Layout ---
st.title("ЁЯУЪ рж╕рж╣рж╛ржпрж╝ржХ ржмрж╛ржВрж▓рж╛ рж╢рж┐ржХрзНрж╖ржХ")
st.caption("ЁЯдЦ ржЖржкржирж╛рж░ ржмрзНржпржХрзНрждрж┐ржЧржд рж╢рж┐ржХрзНрж╖ржХред ржкрзНрж░рж╢рзНржи ржХрж░рзБржи ржПржмржВ AI ржЙрждрзНрждрж░ ржжрзЗржмрзЗред")

st.markdown("""
<div style='padding: 10px; background-color: #f9f9f9; border-left: 5px solid #4CAF50; border-radius: 5px;'>
    ржПржЗ ржЪрзНржпрж╛ржЯржмржЯржЯрж┐ ржЖржкржирж╛рж░ ржкрзВрж░рзНржмржмрж░рзНрждрзА ржХржерзЛржкржХржержи ржоржирзЗ рж░рж╛ржЦрзЗ ржПржмржВ ржЖржкржирж╛рж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓ рждрзИрж░рж┐ ржХрж░рзЗред ржбрж╛ржиржкрж╛рж╢рзЗ рж╕рж╛ржЗржбржмрж╛рж░рзЗ рж╕рзНржорзГрждрж┐ ржжрзЗржЦрзБржиред
</div>
""", unsafe_allow_html=True)

# --- Display Sidebar Memory ---
display_memory_sidebar()

# --- Chat History Display ---
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# --- Chat Input & API Call ---
if prompt := st.chat_input("ржЖржкржирж╛рж░ ржкрзНрж░рж╢рзНржиржЯрж┐ ржПржЦрж╛ржирзЗ рж▓рж┐ржЦрзБржи..."):
    st.session_state.messages.append({"role": "user", "content": prompt})

    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        with st.spinner("ржЪрж┐ржирзНрждрж╛ ржХрж░ржЫрж┐..."):
            try:
                thread_id = "chat_session_" + str(uuid.uuid4())
                payload = {
                    "query": prompt,
                    "user_id": st.session_state.user_id,
                    "thread_id": thread_id
                }

                response = requests.post(CHAT_URL, json=payload, timeout=120)
                response.raise_for_status()

                bot_response = response.json().get("response", "ржжрзБржГржЦрж┐ржд, ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗред")
                st.markdown(bot_response)

                st.session_state.messages.append({"role": "assistant", "content": bot_response})

                # Refresh sidebar memory
                st.rerun()

            except requests.exceptions.RequestException as e:
                st.error(f"тЭМ API-рж░ рж╕рж╛ржерзЗ рж╕ржВржпрзЛржЧ ржХрж░рждрзЗ ржмрзНржпрж░рзНржеред\n\nЁЯФМ Error: {e}")
